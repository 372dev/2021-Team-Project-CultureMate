<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.kh.cm.member.model.dao.MemberDao">
	<sql id="selectMemberSql">
		SELECT ID,
			   USER_ID,
			   PASSWORD,
			   USER_NICK,
			   USER_NAME,
			   USER_ROLE,
			   DATE_BIRTH,
			   EMAIL,
			   GENDER,
			   PHONE,
			   POSTCODE,
			   ADDRESS,
			   DETAIL_ADDR,
			   EXTRA_ADDR,
			   RANK
		FROM MEMBER
		WHERE STATUS = 'Y'
	</sql>

	<resultMap type="com.kh.cm.member.model.vo.Member" id="memberResultMap">
		<id property="id" column="ID" />
		<result property="userId" column="USER_ID" />
		<result property="password" column="PASSWORD" />
		<result property="userNick" column="USER_NICK" />
		<result property="userName" column="USER_NAME" />
		<result property="userRole" column="USER_ROLE" />
		<result property="dateBirth" column="DATE_BIRTH" />
		<result property="gender" column="GENDER" />
		<result property="email" column="EMAIL" />
		<result property="phone" column="PHONE" />
		<result property="postcode" column="POSTCODE" />
		<result property="address" column="ADDRESS" />
		<result property="detailAddr" column="DETAIL_ADDR" />
		<result property="extraAddr" column="EXTRA_ADDR" />
		<result property="rank" column="RANK" />
		<result property="status" column="STATUS" />
		<result property="authkey" column="AUTHKEY" />
	</resultMap>
	
	<select id="selectMember" parameterType="string" resultMap="memberResultMap">
		<include refid="selectMemberSql"></include>
		AND USER_ID = #{userId}
	</select>
	
	<!-- 대입해주는 파라미터가 여러 개일 경우 map 형태로 넘겨주어야 한다. -->
	<select id="findId" parameterType="map" resultType="string">
		SELECT NVL(USER_ID, 0) <!-- userId가 있으면 userId 넘겨주고 없으면 데이터로 0 리턴 -->
		FROM MEMBER
		WHERE 
			USER_NAME = #{userName}
		AND 
			EMAIL = #{email}
		AND 
			PHONE = #{phone}
		AND 
			STATUS = 'Y'
	</select>
	
	<select id="validate" resultType="int">
		SELECT COUNT(*) 
		FROM MEMBER 
		WHERE USER_ID = #{userId}
	</select>
	
	<select id="checkAuth" parameterType="Member" resultMap="memberResultMap">
		SELECT USER_ID
		FROM MEMBER
		WHERE AUTHKEY = #{authkey}
	</select>
	
	<insert id="insertMember" parameterType="Member" useGeneratedKeys="true" keyProperty="id" keyColumn="ID">
		INSERT INTO MEMBER (
			   ID,
			   USER_ID,
			   PASSWORD,
			   USER_NICK,
			   USER_NAME,
			   USER_ROLE,
			   DATE_BIRTH,
			   GENDER,
			   PHONE,
			   EMAIL,
			   POSTCODE,
			   ADDRESS,
			   DETAIL_ADDR,
			   EXTRA_ADDR,
			   RANK,
			   STATUS,
			   AUTHKEY
		) VALUES (
			   MEM_SEQ.NEXTVAL,
			   #{userId},
			   #{password},
			   #{userNick},
			   #{userName},
			   DEFAULT,
			   #{dateBirth},
			   #{gender},
			   #{phone},
			   #{email},
			   #{postcode},
			   #{address},
			   #{detailAddr},
			   #{extraAddr},
			   DEFAULT,
			   DEFAULT,
			   DEFAULT
		)
	</insert>
	
	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER
		SET	
			USER_NICK = #{userNick},
			EMAIL = #{email},
			PHONE = #{phone},
			POSTCODE = #{postcode},
			ADDRESS = #{address},
			DETAIL_ADDR = #{detailAddr},
			EXTRA_ADDR = #{extraAddr}
		WHERE 
			USER_ID = #{userId}
		AND
			PASSWORD = #{password}
	</update>
	
	<update id="updatePassword" parameterType="Member">
		UPDATE MEMBER
		SET 
			PASSWORD = #{password}
		WHERE
			USER_ID = #{userId}
	</update>
	
	<update id="updateAuthkey" parameterType="Member">
		UPDATE MEMBER
		SET 
			AUTHKEY = #{authkey}
		WHERE 
			USER_ID = #{userId}
	</update>
	
	<update id="successAuthkey" parameterType="Member">
		UPDATE MEMBER
		SET 
			STATUS = 'Y'
		WHERE 
			USER_ID = #{userId}
	</update>
	
	<!-- 임시 비밀번호 -->
	<update id="updateTempPwd" parameterType="Member">
		UPDATE MEMBER
		SET
			PASSWORD = #{param4}
		WHERE
			USER_ID = #{param1}
		AND
			EMAIL = #{param2}
		AND
			PHONE = #{param3}
		AND
			STATUS = 'Y'
	</update>
	
	<delete id="deleteMember" parameterType="string">
		UPDATE MEMBER
		SET
			STATUS = 'N'
		WHERE
			USER_ID = #{userId}
	</delete>
</mapper>